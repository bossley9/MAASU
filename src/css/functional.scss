@import './def';

/**
 * Functional CSS
 *
 * Classes are named with the following format, where
 * the items in brackets are variables. Some may be 
 * optional, or may not even apply.
 *
 * {property}{style/scale}-{media query}
 */

/**
 * -----------------------------------------------------
 * Typography
 * -----------------------------------------------------
 */

@mixin typography($media: '') {
  @each $scale, $value in $typographyMap {
    .fs#{$scale}#{$media} {
      font-size: $value !important;
    }
  }

  @each $scale, $value in $letterSpacingMap {
    .ls#{$scale}#{$media} {
      letter-spacing: $value !important;
    }
  }

  .fw400#{$media} {
    font-weight: 400 !important;
  }
  .fw500#{$media} {
    font-weight: 500 !important;
  }
  .fw700#{$media} {
    font-weight: 700 !important;
  }

  .fsn#{$media} {
    font-style: normal !important;
  }
  .fsi#{$media} {
    font-style: italic !important;
  }

  .tdn#{$media} {
    text-decoration: none !important;
  }

  .hov-tdn#{$media}:hover {
    @extend .tdn#{$media};
  }

  .tdu#{$media} {
    text-decoration: underline !important;
  }

  .hov-tdu#{$media}:hover {
    @extend .tdu#{$media};
  }

  .ttu {
    text-transform: uppercase;
  }

  .title1#{$media} {
    @extend .fs5#{$media};
  }
  .title2#{$media} {
    @extend .fs4#{$media};
  }
  .title3#{$media} {
    @extend .fs3#{$media};
  }
  .title4#{$media} {
    @extend .fs2#{$media};
  }
  .title5#{$media} {
    @extend .fs1#{$media};
  }
  .title6#{$media} {
    @extend .fs0#{$media};
  }
}
@include typography();

/**
 * -----------------------------------------------------
 * Spacing
 * -----------------------------------------------------
 */

@mixin spacing($media: '') {
  @each $scale, $value in $spacingMap {
    .pa#{$scale}#{$media} {
      padding: $value !important;
    }
    .pt#{$scale}#{$media} {
      padding-top: $value !important;
    }
    .pr#{$scale}#{$media} {
      padding-right: $value !important;
    }
    .pb#{$scale}#{$media} {
      padding-bottom: $value !important;
    }
    .pl#{$scale}#{$media} {
      padding-left: $value !important;
    }
    .px#{$scale}#{$media} {
      padding-right: $value !important;
      padding-left: $value !important;
    }
    .py#{$scale}#{$media} {
      padding-top: $value !important;
      padding-bottom: $value !important;
    }

    .ma#{$scale}#{$media} {
      margin: $value !important;
    }
    .mt#{$scale}#{$media} {
      margin-top: $value !important;
    }
    .mr#{$scale}#{$media} {
      margin-right: $value !important;
    }
    .mb#{$scale}#{$media} {
      margin-bottom: $value !important;
    }
    .ml#{$scale}#{$media} {
      margin-left: $value !important;
    }
    .mx#{$scale}#{$media} {
      margin-right: $value !important;
      margin-left: $value !important;
    }
    .my#{$scale}#{$media} {
      margin-top: $value !important;
      margin-bottom: $value !important;
    }
  }
  .mxa#{$media} {
    margin-right: auto !important;
    margin-left: auto !important;
  }
}
@include spacing();

/**
 * -----------------------------------------------------
 * Positioning
 * -----------------------------------------------------
 */

@mixin position($media: '') {
  .posa#{$media} {
    position: absolute !important;
  }
  .posr#{$media} {
    position: relative !important;
  }
  .posf#{$media} {
    position: fixed !important;
  }

  .fl#{$media} {
    float: left !important;
  }
  .fr#{$media} {
    float: right !important;
  }
}
@include position();

/**
 * -----------------------------------------------------
 * Display
 * -----------------------------------------------------
 */

@mixin display($media: '') {
  .db#{$media} {
    display: block !important;
  }
  .dn#{$media} {
    display: none !important;
  }
  .di#{$media} {
    display: inline !important;
  }
  .dib#{$media} {
    display: inline-block !important;
  }
  .df#{$media} {
    display: flex !important;
  }
  .dif#{$media} {
    display: inline-flex !important;
  }
}
@include display();

/**
 * -----------------------------------------------------
 * Sizing
 * -----------------------------------------------------
 */

@mixin sizing($media: '') {
  @for $i from 0 through 100 / $step-inc {
    $val: $i * $step-inc;
    .h-#{$val}#{$media} {
      height: #{$val * 1%} !important;
    }
    .mh-#{$val}#{$media} {
      min-height: #{$val * 1%} !important;
    }
    .w-#{$val}#{$media} {
      width: #{$val * 1%} !important;
    }
    .wh-#{$val}#{$media} {
      min-width: #{$val * 1%} !important;
    }
  }
  .m-a#{$media} {
    height: auto !important;
  }
  .w-a#{$media} {
    width: auto !important;
  }
}
@include sizing();

/**
 * -----------------------------------------------------
 * Box Styling
 * -----------------------------------------------------
 */

@mixin boxStyling($media: '') {
  @each $scale, $value in $boxShadowMap {
    .bs#{$scale}#{$media} {
      // TODO color?
      box-shadow: 0 0 $value #555 !important;
    }
    .br#{$media} {
      border-radius: $borderRadius !important;
    }
  }
}
@include boxStyling();

/**
 * -----------------------------------------------------
 * Z Index
 * -----------------------------------------------------
 */

@mixin z($media: '') {
  @each $scale, $value in $zMap {
    .z#{$scale}#{$media} {
      z-index: $value !important;
    }
  }
}
@include z();

/**
 * -----------------------------------------------------
 * Text Alignment
 * -----------------------------------------------------
 */

@mixin text($media: '') {
  @each $scale, $value in $textMap {
    .t#{$scale}#{$media} {
      text-align: $value !important;
    }
  }
}
@include text();

/**
 * -----------------------------------------------------
 * Placement
 * -----------------------------------------------------
 */

@mixin placement($media: '') {
  @for $i from 0 through 100 / $step-inc {
    $val: $i * $step-inc;
    .t-#{$val}#{$media} {
      top: #{$val * 1%} !important;
    }
    .t-s#{$val}#{$media} {
      top: #{$val * -1%} !important;
    }
    .r-#{$val}#{$media} {
      right: #{$val * 1%} !important;
    }
    .r-s#{$val}#{$media} {
      right: #{$val * -1%} !important;
    }
    .b-#{$val}#{$media} {
      bottom: #{$val * 1%} !important;
    }
    .b-s#{$val}#{$media} {
      bottom: #{$val * -1%} !important;
    }
    .l-#{$val}#{$media} {
      left: #{$val * 1%} !important;
    }
    .l-s#{$val}#{$media} {
      left: #{$val * -1%} !important;
    }
  }
}
@include placement();

/**
 * -----------------------------------------------------
 * Colors
 * -----------------------------------------------------
 */

@mixin colors($media: '') {
  .c-inh#{$media} {
    color: inherit !important;
  }
  .c-ini#{$media} {
    color: initial !important;
  }
}
@include colors();

/**
 * -----------------------------------------------------
 * Flex
 * -----------------------------------------------------
 */

@mixin flex($media: '') {
  .fd-r#{$media} {
    flex-direction: row !important;
  }
  .fd-rr#{$media} {
    flex-direction: row-reverse !important;
  }
  .fd-c#{$media} {
    flex-direction: column !important;
  }
  .fd-cr#{$media} {
    flex-direction: column-reverse !important;
  }

  .fw-w#{$media} {
    flex-wrap: wrap !important;
  }
  .fw-nw#{$media} {
    flex-wrap: nowrap !important;
  }
  .fw-wr#{$media} {
    flex-wrap: wrap-reverse !important;
  }

  .jc-fs#{$media} {
    justify-content: flex-start !important;
  }
  .jc-fe#{$media} {
    justify-content: flex-end !important;
  }
  .jc#{$media} {
    justify-content: center !important;
  }
  .jc-sb#{$media} {
    justify-content: space-between !important;
  }
  // no space-around or space-evenly
  // for relatively consistent browser support

  .ai-s#{$media} {
    align-items: stretch !important;
  }
  .ai-fs#{$media} {
    align-items: flex-start !important;
  }
  .ai-fe#{$media} {
    align-items: flex-end !important;
  }
  .ai#{$media} {
    align-items: center !important;
  }
  .ai-c#{$media} {
    align-items: center !important;
  }
  .ai-b#{$media} {
    align-items: baseline !important;
  }
}
@include flex();

/**
 * -----------------------------------------------------
 * Opacity
 * -----------------------------------------------------
 */

@mixin opacity($media: '') {
  @for $i from 0 through 100 / $step-inc {
    $val: $i * $step-inc;
    .op-#{$val}#{$media} {
      opacity: #{$val / 100} !important;
    }
  }
}
@include opacity();

/**
 * -----------------------------------------------------
 * Transform
 * 
 * Values are kept separate (e.g. translateX vs 
 * translateY) to reduce the amount of complexity in 
 * transform styles being used. This method ensures only 
 * one transform is used per element.
 * -----------------------------------------------------
 */

@mixin transform($media: '') {
  @for $i from 0 through 100 / $step-inc {
    $val: $i * $step-inc;
    .tf-x-#{$val}#{$media} {
      @include vendor(transform, translateX(#{$val * 1%}) !important);
    }
    .tf-sx-#{$val}#{$media} {
      @include vendor(transform, translateX(#{$val * -1%}) !important);
    }
    .tf-y-#{$val}#{$media} {
      @include vendor(transform, translateY(#{$val * 1%}) !important);
    }
    .tf-sy-#{$val}#{$media} {
      @include vendor(transform, translateY(#{$val * -1%}) !important);
    }
  }
}
@include transform();

/**
 * -----------------------------------------------------
 * Various
 * 
 * Styles that don't belong in any specific category.
 * -----------------------------------------------------
 */

@mixin various($media: '') {
  .lstn#{$media} {
    list-style-type: none !important;
  }
  .pointer#{$media} {
    cursor: pointer !important;
  }
}
@include various();
